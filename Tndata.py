# -*- coding: utf-8 -*-
"""TN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CF94Z3jsVCF8q4tqmOMwCb3PVuqjSIEt
"""

import requests
from bs4 import BeautifulSoup
import urllib
url = "https://en.wikipedia.org/wiki/COVID-19_pandemic_in_Tamil_Nadu"
html= requests.get(url).text
soup = BeautifulSoup(html,'html.parser')
table = soup.find("table", { "class" : "multicol" })
Diagnosed=[]
Deaths=[]
Active=[]
Recovered=[]
Population=[]
CasesperM=[]
for row in table.findAll("tr"):
    cells = row.findAll("td")
    if len(cells) > 1:
        Diagnosed.append(cells[0].text.rstrip('\n'))
        Deaths.append(cells[1].text.rstrip('\n'))
        Recovered.append(cells[2].text.rstrip('\n'))
        Active.append(cells[3].text.rstrip('\n'))
        Population.append(cells[4].text.rstrip('\n'))
        CasesperM.append(cells[5].text.rstrip('\n'))

!pip install geocoder

def remove (a):
   del a[0]
   return a

Deaths = remove(Deaths)

Diagnosed = remove(Diagnosed)
Population = remove(Population)
CasesperM = remove(CasesperM)

Active = remove(Active)
Recovered = remove(Recovered)

url = "https://en.wikipedia.org/wiki/COVID-19_pandemic_in_Tamil_Nadu"
html= requests.get(url).text
soup = BeautifulSoup(html,'html.parser')
table = soup.find("table", { "class" : "multicol" })
Summons=[]
for row in table.findAll("tr"):
  for cells in row.findAll("td"):
    for a in cells.findAll("a"):
      summons.append(a.get('title',None))

z=[]
for a in summons:
  b=str(a)
  if b != 'None':
    z.append(b)

a=remove(z)
Location = remove(a)

loc=[]
for k in Location:
  newl = k.split()
  loc.append(newl[0])
loc

arr = [loc,Diagnosed,Active,Recovered,Deaths,Population,CasesperM]

df=pd.DataFrame(arr).T

df.columns=['State','Cases','Acive','Recovered','Deaths','Population','CasesperM']

import geocoder

def get_latlng(neighborhood):
    # initialize your variable to None
    lat_lng_coords = None
    # loop until you get the coordinates
    while(lat_lng_coords is None):
        g = geocoder.arcgis('{},Tamil Nadu,India'.format(neighborhood))
        lat_lng_coords = g.latlng
    return lat_lng_coords
# call the function to get the coordinates, store in a new list using list comprehension
coords = [ get_latlng(neighborhood) for neighborhood in df['State'].tolist() ]

df_coords = pd.DataFrame(coords, columns=['Latitude', 'Longitude'])
df['Latitude'] = df_coords['Latitude']
df['Longitude'] = df_coords['Longitude']

import numpy as np

df.to_csv('TN',index=False)